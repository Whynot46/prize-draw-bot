import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import bot.db as db
import bot.services.google_api_service as google_api
from aiogram import Bot
import random
import json
from apscheduler.triggers.date import DateTrigger
from bot.logger import logger


scheduler = AsyncIOScheduler()


async def announce_giveaway_results(bot: Bot, giveaway_id: int):
    try:
        giveaway = await db.get_giveaway_details(giveaway_id)
        if not giveaway:
            logger.warning(f"Giveaway {giveaway_id} not found for announcement")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
        current_winners = json.loads(giveaway['winners_ids']) if giveaway['winners_ids'] else []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = await db.get_participants(giveaway_id)
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        if len(current_winners) < giveaway['winners_count']:
            remaining_winners_count = giveaway['winners_count'] - len(current_winners)
            remaining_participants = [p for p in participants if p not in current_winners]
            
            # –í—ã–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
            new_winners = await select_winners(remaining_participants, remaining_winners_count)
            current_winners.extend(new_winners)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
            await db.set_winners(giveaway_id, current_winners)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏
        await send_winners_announcement(bot, giveaway, current_winners)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
        await google_api.update_giveaway_stats()
        
        # –£–¥–∞–ª—è–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await db.delete_giveaway(giveaway_id)
        logger.info(f"Giveaway {giveaway_id} results announced successfully")
    except Exception as e:
        logger.error(f"Error in announce_giveaway_results for giveaway {giveaway_id}: {str(e)}")


async def restore_scheduled_giveaways(bot: Bot):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        from datetime import datetime
        now = datetime.now().strftime("%Y-%m-%d %H:%M")

        cursor = await db.db_connection.execute(
            "SELECT id, announcement_date FROM giveaways "
            "WHERE datetime(announcement_date) > datetime(?)",
            (now,)
        )
        active_giveaways = await cursor.fetchall()

        for giveaway_id, announcement_date in active_giveaways:
            try:
                announcement_datetime = datetime.strptime(announcement_date, "%Y-%m-%d %H:%M:%S")
                scheduler.add_job(
                    announce_giveaway_results,
                    trigger=DateTrigger(announcement_datetime),
                    args=[bot, giveaway_id],
                    id=f"giveaway_{giveaway_id}"
                )
                logger.info(f"Restored scheduled giveaway {giveaway_id}")
            except Exception as e:
                logger.error(f"Error restoring giveaway {giveaway_id}: {str(e)}")
    except Exception as e:
        logger.error(f"Error in restore_scheduled_giveaways: {str(e)}")


async def setup_scheduler(bot: Bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        scheduler.add_job(hourly_update, 'interval', hours=1)
        scheduler.start()
        await restore_scheduled_giveaways(bot)
        logger.info("Scheduler setup completed successfully")
    except Exception as e:
        logger.error(f"Error in setup_scheduler: {str(e)}")
        raise


async def hourly_update():
    """–ï–∂–µ—á–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets"""
    try:
        await google_api.update_giveaway_stats()
        logger.info("Hourly update completed successfully")
    except Exception as e:
        logger.error(f"Error in hourly_update: {str(e)}")


async def select_winners(participants: list, winners_count: int) -> list:
    """
    –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    :param participants: —Å–ø–∏—Å–æ–∫ ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    :param winners_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    :return: —Å–ø–∏—Å–æ–∫ ID –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    """
    try:
        if not participants:
            logger.warning("No participants to select winners from")
            return []
        
        # –ï—Å–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if winners_count >= len(participants):
            logger.info(f"All participants ({len(participants)}) selected as winners")
            return participants.copy()
        
        # –°–æ–∑–¥–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        weighted_participants = []
        for user_id in participants:
            user = await db.get_user_info(user_id)
            if not user:
                continue
            
            # –ë–∞–∑–æ–≤—ã–π –≤–µ—Å (1 –∑–∞ —É—á–∞—Å—Ç–∏–µ)
            weight = 1
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π
            weight += user.get('invited_friends', 0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ N —Ä–∞–∑, –≥–¥–µ N - –µ–≥–æ –≤–µ—Å
            weighted_participants.extend([user_id] * weight)
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
        if not weighted_participants:
            logger.warning("Weighted participants list is empty, using random selection")
            return random.sample(participants, min(winners_count, len(participants)))
        
        winners = []
        for _ in range(winners_count):
            if not weighted_participants:
                break
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            winner = random.choice(weighted_participants)
            winners.append(winner)
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
            weighted_participants = [uid for uid in weighted_participants if uid != winner]
        
        logger.info(f"Selected {len(winners)} winners from {len(participants)} participants")
        return winners
    except Exception as e:
        logger.error(f"Error in select_winners: {str(e)}")
        return random.sample(participants, min(winners_count, len(participants)))


async def send_winners_announcement(bot: Bot, giveaway: dict, winners: list):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏"""
    try:
        if not winners:
            message = f"üèÜ –†–æ–∑—ã–≥—Ä—ã—à '{giveaway['name']}' –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –±—ã–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        else:
            winners_info = []
            for winner_id in winners:
                user = await db.get_user_info(winner_id)
                name = f"@{user['username']}" if user and user.get('username') else f"ID:{winner_id}"
                winners_info.append(name)
            
            message = (
                f"üèÜ –†–æ–∑—ã–≥—Ä—ã—à '{giveaway['name']}' –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n" + "\n".join(winners_info) + "\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
            )
        
        await bot.send_message(giveaway['channel_id'], message)
        logger.info(f"Winners announcement sent to channel {giveaway['channel_id']}")
    except Exception as e:
        logger.error(f"Error in send_winners_announcement: {str(e)}")