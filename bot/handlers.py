from aiogram.filters.command import Command
from aiogram import F, Bot
from aiogram.types import Message
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types.callback_query import CallbackQuery
from aiogram.filters import StateFilter
import bot.keyboards as kb
import bot.db as db
from bot.states import *
from bot.config import Config, is_admin
import json
import bot.services.google_api_service as google_api_service
from bot.scheduler import scheduler, announce_giveaway_results
from apscheduler.triggers.date import DateTrigger
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from asyncio import sleep
from bot.logger import logger


router = Router()


@router.message(Command("start"), F.chat.type.in_({"group", "supergroup", "channel"}))
async def add_channel_handler(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã"""
    try:
        if not is_admin(message.from_user.id):
            logger.warning(f"Non-admin user {message.from_user.id} tried to add channel")
            return await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª—ã.")
        
        chat_id = message.chat.id
        chat_title = message.chat.title
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        try:
            chat_member = await bot.get_chat_member(chat_id, bot.id)
            if chat_member.status not in ["administrator", "creator"]:
                logger.warning(f"Bot is not admin in channel {chat_id}")
                return await message.answer("–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        except Exception as e:
            logger.error(f"Error checking bot admin rights in channel {chat_id}: {str(e)}")
            return await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {str(e)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –ë–î
        try:
            await db.add_channel(chat_id, chat_title)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
            try:
                await bot.send_message(
                    chat_id,
                    f"üéâ –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —Ç–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–æ—Ç—É —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!\n"
                    f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–¥–µ—Å—å —Ä–æ–∑—ã–≥—Ä—ã—à–∏."
                )
            except Exception as e:
                logger.error(f"Error sending welcome message to channel {chat_id}: {str(e)}")
            
            await google_api_service.update_giveaway_stats()
            logger.info(f"Channel {chat_id} added successfully")
        except Exception as e:
            logger.error(f"Error adding channel {chat_id}: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")
    except Exception as e:
        logger.error(f"Error in add_channel_handler: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext, bot: Bot):
    try:
        user_id = message.from_user.id
        referrer_id = None
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        if len(message.text.split()) > 1:
            try:
                referrer_id = int(message.text.split()[1].strip())
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä–µ—à–µ–ª –ø–æ —Å–≤–æ–µ–π –∂–µ —Å—Å—ã–ª–∫–µ
                if referrer_id == user_id:
                    logger.warning(f"User {user_id} tried to use own referral link")
                    await message.answer("–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é –∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É!")
                    referrer_id = None
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: —Ä–µ—Ñ–µ—Ä–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                elif not await db.get_user_info(referrer_id):
                    logger.warning(f"Invalid referral link for user {user_id}")
                    await message.answer("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
                    referrer_id = None
                    
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                elif await db.get_user_info(user_id):
                    logger.warning(f"User {user_id} already registered")
                    await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ")
                    referrer_id = None
                    
            except ValueError:
                logger.warning(f"Invalid referral format for user {user_id}")
                referrer_id = None
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.add_user(
            user_id=user_id,
            username=message.from_user.username,
            fullname=message.from_user.full_name,
            referrer_id=referrer_id
        )
        
        if referrer_id and referrer_id != user_id:
            try:
                current_count = await db.get_invited_count(referrer_id)
                new_count = current_count + 1
                await db.update_user_invited_count(referrer_id, new_count)
                await google_api_service.update_giveaway_stats()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                try:
                    await bot.send_message(
                        referrer_id,
                        f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "
                        f"@{message.from_user.username or message.from_user.full_name}\n"
                        f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {current_count + 1} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π!"
                    )
                except Exception as e:
                    logger.error(f"Error sending referral notification to {referrer_id}: {str(e)}")
            except Exception as e:
                logger.error(f"Error updating referral count for {referrer_id}: {str(e)}")
        
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!",
            reply_markup=await kb.get_main_menu_keyboard(is_admin(message.from_user.id)))
        logger.info(f"User {user_id} started bot successfully")
    except Exception as e:
        logger.error(f"Error in start_handler: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


@router.message(F.text == "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")
async def show_active_giveaways(message: Message):
    try:
        active_giveaways = await db.get_active_giveaways()
        
        if not active_giveaways:
            await message.answer("üéâ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.\n"
                               "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏, —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –Ω–æ–≤—ã–µ!")
            return
        
        await message.answer(
            "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏:",
            reply_markup=await kb.get_giveaways_list_keyboard(active_giveaways))
        logger.info(f"Active giveaways shown to user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in show_active_giveaways: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.")


@router.message(F.text == "–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞")
async def show_referral_info(message: Message):
    try:
        user_id = message.from_user.id
        user = await db.get_user_info(user_id)
        
        if not user:
            logger.warning(f"Unregistered user {user_id} tried to access referral info")
            return await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        
        referrals = await db.get_user_referrals(user_id)
        invited_count = len(referrals)
        
        await message.answer(
            f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: t.me/{Config.BOT_USERNAME}?start={user_id}\n"
            f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {invited_count}\n",
            reply_markup=await kb.get_referral_keyboard(user_id))
        logger.info(f"Referral info shown to user {user_id}")
    except Exception as e:
        logger.error(f"Error in show_referral_info for user {user_id}: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")


@router.callback_query(F.data.startswith("participate_"))
async def participate_handler(callback: CallbackQuery):
    try:
        giveaway_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ
        user = await db.get_user_info(user_id)
        if not user:
            logger.warning(f"Unregistered user {user_id} tried to participate in giveaway {giveaway_id}")
            return await callback.answer(
                "–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö",
                show_alert=True
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–æ–∑—ã–≥—Ä—ã—à –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
        giveaway = await db.get_giveaway_details(giveaway_id)
        if not giveaway:
            logger.warning(f"Giveaway {giveaway_id} not found or already finished")
            return await callback.answer("–≠—Ç–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω", show_alert=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∞
        from datetime import datetime
        try:
            end_date = datetime.strptime(giveaway['announcement_date'], "%Y-%m-%d %H:%M:%S")
        except ValueError:
            end_date = datetime.strptime(giveaway['announcement_date'], "%d.%m.%Y %H:%M")
        
        if datetime.now() > end_date:
            logger.warning(f"Giveaway {giveaway_id} already finished (date passed)")
            return await callback.answer("–≠—Ç–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω", show_alert=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±–æ—Ç
        if callback.from_user.is_bot:
            logger.warning(f"Bot {user_id} tried to participate in giveaway {giveaway_id}")
            return await callback.answer("–ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        participants = await db.get_participants(giveaway_id)
        if user_id in participants:
            logger.info(f"User {user_id} already participates in giveaway {giveaway_id}")
            return await callback.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ!")
        
        await db.add_participant(giveaway_id, user_id)
        await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à!")
        logger.info(f"User {user_id} added to giveaway {giveaway_id}")
    except Exception as e:
        logger.error(f"Error in participate_handler for user {callback.from_user.id}: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à.")


@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à")
async def create_giveaway_start(message: Message, state: FSMContext):
    try:
        if not is_admin(message.from_user.id):
            logger.warning(f"Non-admin user {message.from_user.id} tried to create giveaway")
            return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        await state.set_state(GiveawayStates.name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:", reply_markup= await kb.remove_keyboard())
        logger.info(f"Admin {message.from_user.id} started giveaway creation")
    except Exception as e:
        logger.error(f"Error in create_giveaway_start: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")


@router.message(GiveawayStates.name)
async def set_giveaway_name(message: Message, state: FSMContext):
    try:
        await state.update_data(name=message.text)
        await state.set_state(GiveawayStates.winners_count)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:",
            reply_markup=await kb.remove_keyboard())
        logger.info(f"Giveaway name set: {message.text}")
    except Exception as e:
        logger.error(f"Error in set_giveaway_name: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è")


@router.message(F.text == "–í—Å–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")
async def show_all_giveaways(message: Message):
    try:
        if not is_admin(message.from_user.id):
            logger.warning(f"Non-admin user {message.from_user.id} tried to view all giveaways")
            return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        giveaways = await db.get_all_giveaways()
        active_giveaways = []
        from datetime import datetime
        
        for giveaway in giveaways:
            try:
                try:
                    end_date = datetime.strptime(giveaway['announcement_date'], "%Y-%m-%d %H:%M:%S")
                except ValueError:
                    end_date = datetime.strptime(giveaway['announcement_date'], "%d.%m.%Y %H:%M")
                
                if datetime.now() < end_date:
                    active_giveaways.append(giveaway)
            except ValueError as e:
                logger.warning(f"Invalid date format in giveaway {giveaway.get('id')}: {giveaway.get('announcement_date')}")
                continue
        
        if not active_giveaways:
            logger.info("No active giveaways found")
            return await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!")
        
        for giveaway in active_giveaways:
            try:
                display_date = datetime.strptime(giveaway['announcement_date'], "%Y-%m-%d %H:%M:%S")
                display_date = display_date.strftime("%d.%m.%Y %H:%M")
            except ValueError:
                display_date = giveaway['announcement_date']
            
            await message.answer(
                f"–†–æ–∑—ã–≥—Ä—ã—à: {giveaway['name']}\n"
                f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {giveaway['winners_count']}\n"
                f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {display_date}",
                reply_markup=await kb.get_giveaway_management_keyboard(giveaway['id']))
        logger.info(f"Active giveaways shown to admin {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in show_all_giveaways: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")


@router.message(GiveawayStates.winners_count)
async def set_giveaway_winners_count(message: Message, state: FSMContext):
    try:
        if not message.text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            return
        
        await state.update_data(winners_count=int(message.text))
        await state.set_state(GiveawayStates.announcement_date)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):",
            reply_markup= await kb.remove_keyboard())
        logger.info(f"Giveaway winners count set: {message.text}")
    except Exception as e:
        logger.error(f"Error in set_giveaway_winners_count: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")


@router.message(GiveawayStates.announcement_date)
async def set_giveaway_announcement_date(message: Message, state: FSMContext):
    try:
        from datetime import datetime
        datetime.strptime(message.text, "%d.%m.%Y %H:%M")
    except ValueError:
        logger.warning(f"Invalid date format: {message.text}")
        return await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú",
            reply_markup=await kb.remove_keyboard())
    
    try:
        await state.update_data(announcement_date=message.text)
        await state.set_state(GiveawayStates.channel_selection)
        
        channels = await db.get_connected_channels()
        if channels:
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞):",
                reply_markup=await kb.get_channels_selection_keyboard(channels))
            logger.info(f"Giveaway announcement date set: {message.text}")
        else:
            await message.answer("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª.")
            await state.clear()
            logger.warning("No channels available for giveaway")
    except Exception as e:
        logger.error(f"Error in set_giveaway_announcement_date: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã")


@router.callback_query(F.data.startswith("toggle_channel_"), GiveawayStates.channel_selection)
async def toggle_channel_selection(callback: CallbackQuery, state: FSMContext):
    try:
        channel_id = int(callback.data.split("_")[2])
        data = await state.get_data()
        
        selected_channels = data.get("selected_channels", [])
        
        if channel_id in selected_channels:
            selected_channels.remove(channel_id)
        else:
            selected_channels.append(channel_id)
        
        await state.update_data(selected_channels=selected_channels)
        
        channels = await db.get_connected_channels()
        await callback.message.edit_reply_markup(
            reply_markup=await kb.get_channels_selection_keyboard(channels, selected_channels))
        await callback.answer()
        logger.info(f"Channel {channel_id} toggled in selection")
    except Exception as e:
        logger.error(f"Error in toggle_channel_selection: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞")


@router.callback_query(F.data == "save_channels", GiveawayStates.channel_selection)
async def save_channels_selection(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        selected_channels = data.get("selected_channels", [])
        
        if not selected_channels:
            logger.warning("No channels selected for giveaway")
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª!", show_alert=True)
            return
        
        await state.set_state(GiveawayStates.confirmation)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤
        channel_names = []
        for channel_id in selected_channels:
            channel = await db.get_channel(channel_id)
            channel_names.append(channel[1] if channel else f"–ö–∞–Ω–∞–ª {channel_id}")
        
        await callback.message.edit_text(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {data['winners_count']}\n"
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {data['announcement_date']}\n"
            f"–ö–∞–Ω–∞–ª—ã: {', '.join(channel_names)}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_giveaway")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_giveaway")]
            ]))
        await callback.answer()
        logger.info("Channels selection saved, confirmation requested")
    except Exception as e:
        logger.error(f"Error in save_channels_selection: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤")


@router.callback_query(F.data == "confirm_giveaway", GiveawayStates.confirmation)
async def confirm_giveaway(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        selected_channels = data.get("selected_channels", [])
        
        if not selected_channels:
            logger.error("No channels selected in confirmation")
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∫–∞–Ω–∞–ª—ã", show_alert=True)
            return
        
        from datetime import datetime
        announcement_date = datetime.strptime(data['announcement_date'], "%d.%m.%Y %H:%M")
        sql_date = announcement_date.strftime("%Y-%m-%d %H:%M:%S")
        
        giveaway_id = None
        for channel_id in selected_channels:
            giveaway_id = await db.create_giveaway(
                name=data['name'],
                winners_count=data['winners_count'],
                announcement_date=sql_date,
                channel_id=channel_id
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            scheduler.add_job(
                announce_giveaway_results,
                trigger=DateTrigger(announcement_date),
                args=[bot, giveaway_id],
                id=f"giveaway_{giveaway_id}"
            )
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
            try:
                await bot.send_message(
                    chat_id=channel_id,
                    text=(
                        f"üéâ –ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à!\n\n"
                        f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
                        f"üëë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {data['winners_count']}\n"
                        f"‚è∞ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {data['announcement_date']}\n\n"
                        f"–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"
                    ),
                    reply_markup=await kb.get_participate_keyboard(giveaway_id)
                )
            except Exception as e:
                logger.error(f"Error posting giveaway to channel {channel_id}: {str(e)}")
        
        await callback.message.edit_text("–†–æ–∑—ã–≥—Ä—ã—à —Å–æ–∑–¥–∞–Ω!")
        await callback.message.answer(
            f"üéâ –ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à!\n\n"
            f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
            f"üëë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {data['winners_count']}\n"
            f"‚è∞ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {data['announcement_date']}\n\n",
            reply_markup= await kb.get_main_menu_keyboard(is_admin(callback.from_user.id)))
        await state.clear()
        logger.info(f"Giveaway {giveaway_id} created successfully in channels {selected_channels}")
    except Exception as e:
        logger.error(f"Error in confirm_giveaway: {str(e)}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        await state.clear()


@router.callback_query(F.data.startswith("select_winners_"))
async def select_winners_start(callback: CallbackQuery):
    try:
        giveaway_id = int(callback.data.split("_")[2])
        
        giveaway = await db.get_giveaway_details(giveaway_id)
        if not giveaway:
            logger.warning(f"Giveaway {giveaway_id} not found")
            return await callback.answer("–≠—Ç–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω", show_alert=True)
        
        participants = await db.get_participants(giveaway_id)
        
        if not participants:
            logger.warning(f"No participants in giveaway {giveaway_id}")
            return await callback.answer("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞", show_alert=True)
        
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1):",
            reply_markup=await kb.get_winners_selection_keyboard(giveaway_id, participants, 0))
        await callback.answer()
        logger.info(f"Winner selection started for giveaway {giveaway_id}")
    except Exception as e:
        logger.error(f"Error in select_winners_start: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")


@router.callback_query(F.data.startswith("winner_"))
async def toggle_winner(callback: CallbackQuery):
    try:
        parts = callback.data.split('_')
        giveaway_id = int(parts[1])
        user_id = int(parts[2])
        page = int(parts[3])
        
        giveaway = await db.get_giveaway_details(giveaway_id)
        if not giveaway:
            logger.warning(f"Giveaway {giveaway_id} not found in toggle_winner")
            return await callback.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        
        current_winners = json.loads(giveaway['winners_ids']) if giveaway['winners_ids'] else []
        
        if user_id in current_winners:
            current_winners.remove(user_id)
        else:
            if len(current_winners) >= giveaway['winners_count']:
                logger.info(f"Winner limit reached for giveaway {giveaway_id}")
                return await callback.answer(
                    f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {giveaway['winners_count']} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π", 
                    show_alert=True
                )
            current_winners.append(user_id)
        
        await db.set_winners(giveaway_id, current_winners)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        participants = await db.get_participants(giveaway_id)
        await callback.message.edit_reply_markup(
            reply_markup=await kb.get_winners_selection_keyboard(giveaway_id, participants, page))
        await callback.answer()
        logger.info(f"Winner {user_id} toggled for giveaway {giveaway_id}")
    except Exception as e:
        logger.error(f"Error in toggle_winner: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è")


@router.callback_query(F.data.startswith("delete_giveaway_"))
async def delete_giveaway_handler(callback: CallbackQuery):
    try:
        giveaway_id = int(callback.data.split("_")[2])
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        try:
            scheduler.remove_job(f"giveaway_{giveaway_id}")
        except Exception as e:
            logger.warning(f"Job giveaway_{giveaway_id} not found in scheduler: {str(e)}")
        
        success = await db.delete_giveaway(giveaway_id)
        if success:
            await callback.message.answer("–†–æ–∑—ã–≥—Ä—ã—à –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
            logger.info(f"Giveaway {giveaway_id} deleted successfully")
        else:
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
            logger.error(f"Error deleting giveaway {giveaway_id}")
        
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in delete_giveaway_handler: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")


@router.callback_query(F.data.startswith("copy_ref_"))
async def copy_referral_link(callback: CallbackQuery):
    try:
        user_id = int(callback.data.split("_")[2])
        referral_link = f"t.me/{Config.BOT_USERNAME}?start={user_id}"
        await callback.answer(f"–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: {referral_link}", show_alert=True)
        logger.info(f"Referral link copied for user {user_id}")
    except Exception as e:
        logger.error(f"Error in copy_referral_link: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏")


@router.callback_query(F.data.startswith("winners_page_"))
async def handle_winners_pagination(callback: CallbackQuery):
    try:
        _, _, giveaway_id, page = callback.data.split('_')
        giveaway_id = int(giveaway_id)
        page = int(page)
        
        participants = await db.get_participants(giveaway_id)
        await callback.message.edit_reply_markup(
            reply_markup=await kb.get_winners_selection_keyboard(giveaway_id, participants, page))
        await callback.answer()
        logger.info(f"Winners page changed to {page} for giveaway {giveaway_id}")
    except Exception as e:
        logger.error(f"Error in handle_winners_pagination: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")


@router.callback_query(F.data.startswith("save_winners_"))
async def save_winners_handler(callback: CallbackQuery):
    try:
        giveaway_id = int(callback.data.split("_")[2])
        giveaway = await db.get_giveaway_details(giveaway_id)
        
        if not giveaway:
            logger.warning(f"Giveaway {giveaway_id} not found in save_winners_handler")
            return await callback.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        current_winners = json.loads(giveaway['winners_ids']) if giveaway['winners_ids'] else []
        
        if not current_winners:
            logger.info(f"No winners selected for giveaway {giveaway_id}")
            return await callback.answer("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è")
        
        await callback.message.answer(
            f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(current_winners)} –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª—è. "
            f"–û—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {giveaway['announcement_date']}.")
        await callback.answer()
        logger.info(f"Winners saved for giveaway {giveaway_id}: {current_winners}")
    except Exception as e:
        logger.error(f"Error in save_winners_handler: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")


@router.message(F.text == "–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã")
async def show_connected_channels(message: Message, state: FSMContext):
    try:
        if not is_admin(message.from_user.id):
            logger.warning(f"Non-admin user {message.from_user.id} tried to view connected channels")
            return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        add_button = InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", 
            callback_data="add_channel"
        )
        
        channels = await db.get_connected_channels()
        if channels:
            channels_text = "–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(
                f"{i+1}. {channel[1]} (ID: {channel[0]})" 
                for i, channel in enumerate(channels))
            await message.answer(
                channels_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[add_button]]))
            logger.info(f"Connected channels shown to admin {message.from_user.id}")
        else:
            await message.answer(
                "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[add_button]]))
            logger.info("No connected channels found")
    except Exception as e:
        logger.error(f"Error in show_connected_channels: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")


@router.callback_query(F.data == "add_channel")
async def start_add_channel(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ @username –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –µ–≥–æ ID.\n"
            "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ!",
            reply_markup=await kb.remove_keyboard())
        await state.set_state(ChannelStates.waiting_for_channel)
        await callback.answer()
        logger.info(f"Admin {callback.from_user.id} started channel addition")
    except Exception as e:
        logger.error(f"Error in start_add_channel: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")


@router.message(ChannelStates.waiting_for_channel)
async def process_channel_input(message: Message, state: FSMContext, bot: Bot):
    try:
        channel_input = message.text.strip()
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞
        if channel_input.startswith('@'):
            chat = await bot.get_chat(channel_input)
            channel_id = chat.id
            channel_title = chat.title
        else:
            channel_id = int(channel_input)
            chat = await bot.get_chat(channel_id)
            channel_title = chat.title
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
        try:
            chat_member = await bot.get_chat_member(channel_id, bot.id)
            if chat_member.status not in ['administrator', 'creator']:
                raise Exception("–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞")
        except Exception as e:
            logger.warning(f"Bot is not admin in channel {channel_id}: {str(e)}")
            await message.answer(
                f"–û—à–∏–±–∫–∞: {str(e)}\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await state.update_data(
            channel_id=channel_id,
            channel_title=channel_title
        )
        
        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_channel"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_channel")
            ]
        ])
        
        await message.answer(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {channel_title}\n"
            f"ID: {channel_id}",
            reply_markup=confirm_keyboard)
        await state.set_state(ChannelStates.confirm_channel)
        logger.info(f"Channel {channel_id} ready for confirmation")
    except Exception as e:
        logger.error(f"Error in process_channel_input: {str(e)}")
        await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(F.data == "confirm_channel", ChannelStates.confirm_channel)
async def confirm_add_channel(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        channel_id = data['channel_id']
        channel_title = data['channel_title']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –ë–î
        await db.add_channel(channel_id, channel_title)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        try:
            await bot.send_message(
                channel_id,
                f"üéâ –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–æ—Ç—É —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!\n"
                f"–¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∏."
            )
        except Exception as e:
            logger.error(f"Error sending welcome message to channel {channel_id}: {str(e)}")

        await callback.message.answer(
            f"–ö–∞–Ω–∞–ª {channel_title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=await kb.get_main_menu_keyboard(True))
        await state.clear()
        logger.info(f"Channel {channel_id} added successfully")
    except Exception as e:
        logger.error(f"Error in confirm_add_channel: {str(e)}")
        await callback.message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}",
            reply_markup=await kb.get_main_menu_keyboard(True))
        await state.clear()
    finally:
        await callback.answer()


@router.callback_query(F.data == "cancel_channel", ChannelStates.confirm_channel)
async def cancel_add_channel(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=await kb.get_main_menu_keyboard(True))
        await state.clear()
        logger.info("Channel addition cancelled")
    except Exception as e:
        logger.error(f"Error in cancel_add_channel: {str(e)}")
    finally:
        await callback.answer()


@router.message(F.text == "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def start_broadcast(message: Message, state: FSMContext):
    try:
        if not is_admin(message.from_user.id):
            logger.warning(f"Non-admin user {message.from_user.id} tried to start broadcast")
            return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        await state.set_state(BroadcastStates.waiting_for_text)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=await kb.remove_keyboard())
        logger.info(f"Admin {message.from_user.id} started broadcast creation")
    except Exception as e:
        logger.error(f"Error in start_broadcast: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")


@router.message(BroadcastStates.waiting_for_text)
async def process_broadcast_text(message: Message, state: FSMContext):
    try:
        await state.update_data(text=message.text)
        await state.set_state(BroadcastStates.waiting_for_photos)
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ'",
            reply_markup=await kb.get_broadcast_keyboard())
        logger.info("Broadcast text received")
    except Exception as e:
        logger.error(f"Error in process_broadcast_text: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")


@router.message(BroadcastStates.waiting_for_photos, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ")
async def skip_photos(message: Message, state: FSMContext):
    try:
        await state.update_data(photos=[])
        await state.set_state(BroadcastStates.confirmation)
        data = await state.get_data()
        
        await message.answer(
            f"–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{data['text']}\n\n"
            "–§–æ—Ç–æ: –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é—Ç—Å—è\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:",
            reply_markup=await kb.get_broadcast_confirmation_keyboard())
        logger.info("Photos skipped for broadcast")
    except Exception as e:
        logger.error(f"Error in skip_photos: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@router.message(BroadcastStates.waiting_for_photos, F.photo)
async def process_broadcast_photos(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        photos = data.get("photos", [])
        
        if len(photos) >= 10:
            logger.warning("Maximum 10 photos reached for broadcast")
            return await message.answer("–ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'")
        
        photos.append(message.photo[-1].file_id)
        await state.update_data(photos=photos)
        await message.answer(f"–§–æ—Ç–æ {len(photos)}/10 –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        logger.info(f"Photo {len(photos)} added to broadcast")
    except Exception as e:
        logger.error(f"Error in process_broadcast_photos: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")


@router.message(BroadcastStates.waiting_for_photos, F.text == "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ")
async def confirm_photos(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        if not data.get("photos"):
            logger.warning("No photos attached for broadcast")
            await message.answer("–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ!")
            return
        
        await state.set_state(BroadcastStates.confirmation)
        await message.answer(
            f"–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{data['text']}\n\n"
            f"–§–æ—Ç–æ: {len(data['photos'])} —à—Ç.\n\n",
            reply_markup=await kb.get_broadcast_confirmation_keyboard())
        logger.info(f"Broadcast with {len(data['photos'])} photos ready for confirmation")
    except Exception as e:
        logger.error(f"Error in confirm_photos: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")


@router.message(BroadcastStates.confirmation, F.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def approve_broadcast(message: Message, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        all_users = await db.get_all_users()
        users = [user for user in all_users if not is_admin(user['user_id'])]
        
        success = 0
        
        for user in users:
            try:
                if data.get("photos"):
                    media = [InputMediaPhoto(media=photo) for photo in data["photos"]]
                    media[0].caption = data["text"]
                    media[0].parse_mode = "HTML"
                    await bot.send_media_group(chat_id=user["user_id"], media=media)
                else:
                    await bot.send_message(
                        chat_id=user["user_id"],
                        text=data["text"],
                        parse_mode="HTML"
                    )
                success += 1
                await sleep(0.1)
            except Exception as e:
                logger.warning(f"Error sending broadcast to user {user['user_id']}: {str(e)}")
        
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", 
                           reply_markup= await kb.get_main_menu_keyboard(is_admin(message.from_user.id)))
        await state.clear()
        logger.info(f"Broadcast sent to {success} users successfully")
    except Exception as e:
        logger.error(f"Error in approve_broadcast: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()


@router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", StateFilter(BroadcastStates.waiting_for_photos, BroadcastStates.confirmation))
async def cancel_broadcast(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", 
                           reply_markup=await kb.get_main_menu_keyboard(is_admin(message.from_user.id)))
        logger.info("Broadcast cancelled")
    except Exception as e:
        logger.error(f"Error in cancel_broadcast: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–∞—Å—Å—ã–ª–∫–∏")


@router.callback_query(F.data == "check_subscriptions")
async def check_subscriptions_handler(callback: CallbackQuery, bot: Bot):
    try:
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if is_admin(user_id):
            await callback.message.delete()
            await start_handler(callback.message, FSMContext(), bot)
            return
        
        unsubscribed = await check_user_subscriptions(bot, user_id)
        
        if unsubscribed:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            new_keyboard = await get_subscription_check_keyboard(unsubscribed)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            current_text = callback.message.text
            new_text = f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:"
            
            if current_text != new_text:
                await callback.message.edit_text(
                    text=new_text,
                    reply_markup=new_keyboard
                )
            else:
                await callback.answer("–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
            logger.info(f"Subscription check for user {user_id}: still not subscribed")
        else:
            await callback.message.delete()
            await start_handler(callback.message, FSMContext(), bot)
            logger.info(f"User {user_id} passed subscription check")
    except Exception as e:
        logger.error(f"Error in check_subscriptions_handler: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)


@router.callback_query(F.data == "cancel_giveaway", GiveawayStates.confirmation)
async def cancel_giveaway_creation(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.message.edit_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=await kb.get_main_menu_keyboard(is_admin(callback.from_user.id)))
        logger.info("Giveaway creation cancelled")
    except Exception as e:
        logger.error(f"Error in cancel_giveaway_creation: {str(e)}")
    finally:
        await callback.answer()


@router.callback_query(F.data == "cancel_giveaway")
async def cancel_giveaway_global(callback: CallbackQuery, state: FSMContext):
    try:
        current_state = await state.get_state()
        if current_state in [
            GiveawayStates.name,
            GiveawayStates.winners_count,
            GiveawayStates.announcement_date,
            GiveawayStates.channel_selection,
            GiveawayStates.confirmation
        ]:
            await state.clear()
            await callback.message.edit_text(
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=await kb.get_main_menu_keyboard(is_admin(callback.from_user.id)))
            logger.info("Giveaway creation cancelled")
    except Exception as e:
        logger.error(f"Error in cancel_giveaway_global: {str(e)}")
    finally:
        await callback.answer()


async def check_user_subscriptions(bot: Bot, user_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
    try:
        required_channels = await google_api_service.get_subscription_channels()
        if not required_channels:
            return None
            
        unsubscribed = []
        
        for channel in required_channels:
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –∫–∞–Ω–∞–ª–∞ –∫ integer
                channel_id = int(channel['channel_id'])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
                    if member.status in ['member', 'administrator', 'creator']:
                        continue  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
                    
                    unsubscribed.append(channel)
                
                except Exception as e:
                    if "user not found" in str(e).lower():
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
                        unsubscribed.append(channel)
                    else:
                        logger.warning(f"Error checking user subscription for channel {channel_id}: {str(e)}")
                        unsubscribed.append(channel)
                        
            except ValueError:
                logger.warning(f"Invalid channel ID format: {channel['channel_id']}")
                continue
                
        return unsubscribed if unsubscribed else None
    except Exception as e:
        logger.error(f"Error in check_user_subscriptions: {str(e)}")
        return None


async def get_subscription_check_keyboard(channels):
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: —Å—Å—ã–ª–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã -> fallback –∫ ID"""
    buttons = []
    for channel in channels:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–∑ ID
        url = channel.get('link') or f"https://t.me/c/{str(abs(channel['channel_id']))}"
        
        buttons.append([
            InlineKeyboardButton(
                text=f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel['title']}", 
                url=url
            )
        ])
    
    buttons.append([
        InlineKeyboardButton(
            text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", 
            callback_data="check_subscriptions"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)